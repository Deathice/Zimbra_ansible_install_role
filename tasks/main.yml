---
# tasks file for ITM_zimbra_install
- name: Download Zimbra package
  block:
    - name: Create untar directory
      file:
        path: /tmp/zcs
        state: directory

    - name: Copy zimbra file
      copy: 
        src: "{{ zim_unarchive }}.tgz"
        dest: /tmp/zcs
      register: zim_file_status
      ignore_errors: true

    - name: Downloading zimbra file in background
      get_url:
        url: "{{ zim_url }}"
        dest: /tmp/zcs
      async: 3600
      poll: 0
      register: dw_file
      when: zim_file_status.failed

- name: Generating variables
  block:
    - name: randomham
      shell: date +%s|sha256sum|base64|head -c 10
      register: randomham

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: randomspam
      shell: date +%s|sha256sum|base64|head -c 10
      register: randomspam

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: randomvirus
      shell: date +%s|sha256sum|base64|head -c 10
      register: randomvirus


    - name: Current HOSTNAME
      debug:
        msg: "Current: {{ ansible_fqdn }} {{ ansible_domain }} {{ ansible_hostname }}"

    - name: Changing FQDN
      shell: hostnamectl set-hostname {{ srv_fqdn }}
      when:
        - ansible_fqdn != srv_fqdn

    - name: Set Fact for ansible_fqdn
      set_fact:
        ansible_fqdn: "{{ srv_fqdn }}"

    - name: Set Fact for ansible_domain
      set_fact:
        ansible_domain: "{{ srv_fqdn.split('.')[1:] | join('.') }}"

    - name: Set Fact for ansible_hostname
      set_fact:
        ansible_hostname: "{{ srv_fqdn.split('.')[0] }}"

    - name: Current HOSTNAME
      debug:
        msg: "NEW Current: {{ ansible_fqdn }} {{ ansible_domain }} {{ ansible_hostname }}"


- name: Manipulating files, packages and services
  block:
    - name: Installing packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - 'perl'
        - 'net-tools'
        - 'nmap-ncat'
        - 'dnsmasq'
        - 'libselinux-python'

    - name: System update
      yum:
        name: '*'
        state: latest

    - name: Moving dnsmasq to .original
      copy:
        remote_src: true
        src: /etc/dnsmasq.conf
        dest: /etc/dnsmasq.conf.original

    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 644

    - name: Start and enable dnsmasq service
      service:
        name: dnsmasq
        state: started
        enabled: true

    - name: Copy ifcfg-interface template
      template:
        src: ifcfg-interface.j2
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
        owner: root
        group: root
        mode: 0644

    - name: Copy resolv.conf template
      template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: 0644
      notify:
        - restart dnsmasq

    - name: Copy config script zimbra file
      template:
        src: 'installZimbraScript.j2'
        dest: /tmp/zcs/installZimbraScript

    - name: Copy config script keystrokes file
      template:
        src: 'installZimbra-keystrokes.j2'
        dest: /tmp/zcs/installZimbra-keystrokes

    - name: Checking download status
      async_status: jid={{ dw_file.ansible_job_id }}
      register: dw_status
      until: dw_status.finished
      retries: 980
      when: zim_file_status.failed

    - name: Disable and stop postfix
      service:
        name: postfix
        state: stopped
        enabled: False

    - name: Configure dnsmasq
      template:
        src: ITM_zimbra_ansible_install/templates/dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 644

    - name: Installing Zimbra
      block:
        - name: Configuring /etc/hosts
          lineinfile:
            path: /etc/hosts
            regexp: '^{{ ansible_default_ipv4.address }}.*'
            line: '{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}'
          tags:
            - test

        - name: unarchive zimbra file
          unarchive:
            src: /tmp/zcs/{{ zim_unarchive }}.tgz
            dest: /tmp/zcs
            remote_src: true

        - name: Installing Zimbra Collaboration just the Software
          shell: ./install.sh -s < /tmp/zcs/installZimbra-keystrokes
          args:
            chdir: /tmp/zcs/{{ zim_unarchive }}

        - name: Installing Zimbra Collaboration injecting the configuration
          shell: /opt/zimbra/libexec/zmsetup.pl -c /tmp/zcs/installZimbraScript
    
        - name: Change to zimbra user and execute zmcontrol restart
          shell: su - zimbra -c 'zmcontrol restart'
      when: 
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version == '7'

    - meta: flush_handlers
