---
- name: Agree software license
  block:
    - name: license
      pause:
        prompt: "Do you agree with the terms of the software license agreement? [Y/n]"
      register: install_package

    - name: setting license var
      set_fact:
        install_license: "{{ install_package.user_input }}"
  when:
    - prompt
  tags:
    - prepare

- name: Zimbra Questions
  block:
    - name: repo
      pause:
        prompt: "Use Zimbra's package repository [Y/n]"
      register: install_package

    - name: setting repo var
      set_fact:
        install_repo: "{{ install_package.user_input }}"

    - name: zldap
      pause:
        prompt: "Install zimbra-ldap [Y/n]"
      register: install_package

    - name: setting zldap var
      set_fact:
        install_zldap: "{{ install_package.user_input }}"

    - name: zlogger
      pause:
        prompt: "Install zimbra-logger [Y/n]"
      register: install_package

    - name: setting zlogger var
      set_fact:
        install_zlogger: "{{ install_package.user_input }}"

    - name: zmta
      pause:
        prompt: "Install zimbra-mta [Y/n]"
      register: install_package

    - name: setting zmta var
      set_fact:
        install_zmta: "{{ install_package.user_input }}"

    - name: zdnscache
      pause:
        prompt: "Install zimbra-dnscache [y/N]"
      register: install_package

    - name: setting zdnscache var
      set_fact:
        install_zdnscache: "{{ install_package.user_input }}"

    - name: zsnmp
      pause:
        prompt: "Install zimbra-snmp [Y/n]"
      register: install_package

    - name: setting zsnmp var
      set_fact:
        install_zsnmp: "{{ install_package.user_input }}"

    - name: zstore
      pause:
        prompt: "Install zimbra-store [Y/n]"
      register: install_package

    - name: setting zstore var
      set_fact:
        install_zstore: "{{ install_package.user_input }}"

    - name: zapache
      pause:
        prompt: "Install zimbra-apache [Y/n]"
      register: install_package

    - name: setting zapache var
      set_fact:
        install_zapache: "{{ install_package.user_input }}"

    - name: zspell
      pause:
        prompt: "Install zimbra-spell [Y/n]"
      register: install_package

    - name: setting zspell var
      set_fact:
        install_zspell: "{{ install_package.user_input }}"

    - name: zmemcached
      pause:
        prompt: "Install zimbra-memcached [Y/n]"
      register: install_package

    - name: setting zmemcached var
      set_fact:
        install_zmemcached: "{{ install_package.user_input }}"

    - name: zproxy
      pause:
        prompt: "Install zimbra-proxy [Y/n]"
      register: install_package

    - name: setting zproxy var
      set_fact:
        install_zproxy: "{{ install_package.user_input }}"

    - name: zchat
      pause:
        prompt: "Install zimbra-chat [Y/n]"
      register: install_package

    - name: setting zchat var
      set_fact:
        install_zchat: "{{ install_package.user_input }}"

    - name: zdrive
      pause:
        prompt: "Install zimbra-drive [Y/n]"
      register: install_package

    - name: setting zdrive var
      set_fact:
        install_zdrive: "{{ install_package.user_input }}"

    - name: zimapd
      pause:
        prompt: "Install zimbra-imapd (BETA - for evaluation only) [y/N]"
      register: install_package

    - name: setting zimapd var
      set_fact:
        install_zimapd: "{{ install_package.user_input }}"

    - name: zmodified
      pause:
        prompt: "The system will be modified.  Continue? [Y/n]"
      register: install_package

    - name: setting zmodified var
      set_fact:
        install_zmodified: "{{ install_package.user_input }}"
  when:
    - prompt
    - install_license == 'Y' or install_license == 'y'
  tags:
    - prepare

- name: Download Zimbra package
  block:
    - name: Copy resolv.conf template
      template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: 0644

    - name: Create untar directory
      file:
        path: /tmp/zcs
        state: directory

    - name: Getting checksum zimbra file
      get_url:
        url: "{{ zim_url }}.md5"
        dest: /tmp/zcs

    - name: Validate if zimbra file exist into remote server
      stat:
        path: "/tmp/zcs/{{ zim_unarchive }}.tgz"
      register: zimbra_file

    - name: Validate if zimbra file exist into ansible controller
      find:
        paths: "{{ playbook_dir }}"
        patterns: '*.tgz'
        recurse: true
      register: zimbra_controller_file
      delegate_to: localhost
      when: not zimbra_file.stat.exists

    - name: Copy zimbra file
      copy:
        src: "{{ zim_unarchive }}.tgz"
        dest: /tmp/zcs
      register: copy_zim_file
      when: not zimbra_file.stat.exists and item.path
      loop:
        "{{ zimbra_controller_file.files }}"

    - name: Validate if zimbra file already exist
      stat:
        path: "/tmp/zcs/{{ zim_unarchive }}.tgz"
      register: zimbra_file

    - name: Downloading zimbra file in background
      get_url:
        url: "{{ zim_url |mandatory }}"
        dest: /tmp/zcs
      async: 3600
      poll: 0
      register: dw_file
      when: not zimbra_file.stat.exists

    - name: Validating Checksum
      shell: /usr/bin/md5sum -c /tmp/zcs/{{ zim_unarchive }}.tgz.md5
      args:
        chdir: /tmp/zcs
      register: checksum_file
      when: zimbra_file.changed or zimbra_controller_file.changed

    - name: Your zimbra tgz file doesnt match with md5 file
      debug:
        msg: "Please check your zimbra package downloaded and try again. The tgz file and md5sum file doesn't match"
      when: not checksum_file.skipped

    - meta: end_play
      when: not checksum_file.skipped
  when:
    - install_zmodified == 'y' or install_zmodified == 'Y'
    - install_license == 'Y' or install_license == 'y'
  tags:
    - prepare
    - download

- name: Generating variables
  block:
    - name: randomspam
      set_fact:
        randomham: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: randomspam
      set_fact:
        randomspam: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: randomvirus
      set_fact:
        randomvirus: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: Generating password
      set_fact:
        pass_config: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: Current HOSTNAME
      debug:
        msg: "Current: {{ ansible_fqdn }} {{ ansible_domain }} {{ ansible_hostname }}"

    - name: Changing FQDN
      hostname:
        name: "{{ srv_hostname }}"
      when:
        - ansible_fqdn != srv_hostname

    - name: Set Fact for ansible_fqdn
      set_fact:
        ansible_fqdn: "{{ srv_hostname }}"

    - name: Set Fact for ansible_domain
      set_fact:
        ansible_domain: "{{ srv_hostname.split('.')[1:] | join('.') }}"

    - name: Set Fact for ansible_hostname
      set_fact:
        ansible_hostname: "{{ srv_hostname.split('.')[0] }}"

    - name: Current HOSTNAME
      debug:
        msg: "NEW Current: {{ ansible_fqdn }} {{ ansible_domain }} {{ ansible_hostname }}"
  when:
    - install_zmodified == 'y' or install_zmodified == 'Y'
    - install_license == 'Y' or install_license == 'y'
  tags: prepare

- name: Manipulating files, packages and services
  block:
    - name: Setting timezone for server
      timezone:
        name: "{{ timezone }}"

    - name: Setting admin password
      copy:
        content: "zimbra_pass: {{ pass_config }}"
        dest: "{{ ansible_user_dir }}/.zimbra_config_pass"
        owner: root
        group: root
        remote_src: true

    - name: Installing packages
      yum:
        name: "{{ zim_packages }}"
        state: present
      tags:
        - prepare

    - name: System update
      yum:
        name: '*'
        state: present
      tags:
        - prepare

    - name: Moving dnsmasq to .original
      copy:
        remote_src: true
        src: /etc/dnsmasq.conf
        dest: /etc/dnsmasq.conf.original
      tags:
        - prepare

    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 0644
      tags:
        - prepare

    - name: Copy ifcfg-interface template
      template:
        src: ifcfg-interface.j2
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
        owner: root
        group: root
        mode: 0644
      tags:
        - prepare

    - name: Start and enable dnsmasq service
      service:
        name: dnsmasq
        state: restarted
        enabled: true
      tags:
        - prepare

    - name: Start and enable firewalld service
      service:
        name: firewalld
        state: restarted
        enabled: true
      tags:
        - prepare

    - name: Copy config script zimbra file
      template:
        src: 'installZimbraScript.j2'
        dest: /tmp/zcs/installZimbraScript
      tags:
        - prepare

    - name: Copy config script keystrokes file
      template:
        src: 'installZimbra-keystrokes.j2'
        dest: /tmp/zcs/installZimbra-keystrokes
      tags:
        - prepare

    - name: Download response file
      fetch:
        src: /tmp/zcs/installZimbra-keystrokes
        dest: /tmp/installZimbra-keystrokes
        flat: yes
      notify:
        - display_message

    - name: Checking download status
      async_status: jid={{ dw_file.ansible_job_id }}
      register: dw_status
      until: dw_status.finished
      retries: 980
      when: not zimbra_file.stat.exists
      tags:
        - prepare

    - name: Validating Checksum
      shell: /usr/bin/md5sum -c /tmp/zcs/{{ zim_unarchive }}.tgz.md5
      args:
        chdir: /tmp/zcs
      register: checksum_file
      when: dw_status is defined

    - name: Disable and stop postfix
      service:
        name: postfix
        state: stopped
        enabled: False
      tags:
        - prepare

    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 0644
      tags:
        - prepare
  when:
    - install_zmodified == 'y' or install_zmodified == 'Y'
    - install_license == 'Y' or install_license == 'y'

- name: Installing Zimbra
  block:
    - name: Configuring /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^{{ ansible_default_ipv4.address }}.*'
        line: '{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}'
      tags:
        - prepare

    - name: unarchive zimbra file
      unarchive:
        src: /tmp/zcs/{{ zim_unarchive }}.tgz
        dest: /tmp/zcs
        remote_src: true
      tags:
        - prepare

    - name: Installing Zimbra Collaboration, just the Software
      shell: ./install.sh -s < /tmp/zcs/installZimbra-keystrokes
      args:
        chdir: /tmp/zcs/{{ zim_unarchive }}

    - name: Installing Zimbra Collaboration, injecting the configuration
      shell: /opt/zimbra/libexec/zmsetup.pl -c /tmp/zcs/installZimbraScript

    - name: Change to zimbra user and execute zmcontrol restart
      shell: su - zimbra -c 'zmcontrol restart'
      register: zmcontrol_status
      ignore_errors: true

    - name: Delete zmconfigdctl.pid file
      file:
        path: "{{ zmconfigd_file }}"
        state: absent
      when: zmcontrol_status.failed

    - name: Restart zimbra services
      shell: su - zimbra -c 'zmcontrol restart'
      when: zmcontrol_status.failed

  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '7'
    - install_zmodified == 'y' or install_zmodified == 'Y'
    - install_license == 'Y' or install_license == 'y'

- name: Enable ports
  block:
    - name: Enable external ports for Zimbra
      firewalld:
        port: "{{ item }}"
        state: enabled
        permanent: true
      with_items:
        - "{{ zim_ports }}"
      notify:
        - Restart firewalld service
      tags:
        - prepare
  when:
    - install_zmodified == 'y' or install_zmodified == 'Y'
    - install_license == 'Y' or install_license == 'y'

- name: Notifiying to user in charge
  block:
    - name: Task Complete
      telegram:
        token: '{{ token_id }}'
        chat_id: '{{ chatid }}'
        msg: "{{ item }}"
      with_items:
        - Your Zimbra installation has been completed successfully
        - Your IP Zimbra Server is {{ ansible_default_ipv4.address }}
      when:
        - tg
