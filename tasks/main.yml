---
- name: Download Zimbra package
  block:
    - name: license
      pause:
        prompt: "Do you agree with the terms of the software license agreement?"
      register: install_package

    - name: setting license var
      set_fact:
        install_license: "{{ install_package.user_input }}"

    - name: repo
      pause:
        prompt: "Use Zimbra's package repository"
      register: install_package

    - name: setting repo var
      set_fact:
        install_repo: "{{ install_package.user_input }}"

    - name: zldap
      pause:
        prompt: "Install zimbra-ldap"
      register: install_package

    - name: setting zldap var
      set_fact:
        install_zldap: "{{ install_package.user_input }}"

    - name: zlogger
      pause:
        prompt: "Install zimbra-logger"
      register: install_package

    - name: setting zlogger var
      set_fact:
        install_zlogger: "{{ install_package.user_input }}"

    - name: zmta
      pause:
        prompt: "Install zimbra-mta"
      register: install_package

    - name: setting zmta var
      set_fact:
        install_zmta: "{{ install_package.user_input }}"

    - name: zdnscache
      pause:
        prompt: "Install zimbra-dnscache"
      register: install_package

    - name: setting zdnscache var
      set_fact:
        install_zdnscache: "{{ install_package.user_input }}"

    - name: zsnmp
      pause:
        prompt: "Install zimbra-snmp"
      register: install_package

    - name: setting zsnmp var
      set_fact:
        install_zsnmp: "{{ install_package.user_input }}"

    - name: zstore
      pause:
        prompt: "Install zimbra-store"
      register: install_package

    - name: setting zstore var
      set_fact:
        install_zstore: "{{ install_package.user_input }}"

    - name: zapache
      pause:
        prompt: "Install zimbra-apache"
      register: install_package

    - name: setting zapache var
      set_fact:
        install_zapache: "{{ install_package.user_input }}"

    - name: zspell
      pause:
        prompt: "Install zimbra-spell"
      register: install_package

    - name: setting zspell var
      set_fact:
        install_zspell: "{{ install_package.user_input }}"

    - name: zmemcached
      pause:
        prompt: "Install zimbra-memcached"
      register: install_package

    - name: setting zmemcached var
      set_fact:
        install_zmemcached: "{{ install_package.user_input }}"

    - name: zproxy
      pause:
        prompt: "Install zimbra-proxy"
      register: install_package

    - name: setting zproxy var
      set_fact:
        install_zproxy: "{{ install_package.user_input }}"

    - name: zchat
      pause:
        prompt: "Install zimbra-chat"
      register: install_package

    - name: setting zchat var
      set_fact:
        install_zchat: "{{ install_package.user_input }}"

    - name: zdrive
      pause:
        prompt: "Install zimbra-drive"
      register: install_package

    - name: setting zdrive var
      set_fact:
        install_zdrive: "{{ install_package.user_input }}"

    - name: zimapd
      pause:
        prompt: "Install zimbra-imapd (BETA - for evaluation only)"
      register: install_package
      when:
        - zim_short_vs == "8.8"

    - name: setting zimapd var
      set_fact:
        install_zimapd: "{{ install_package.user_input }}"

    - name: zmodified
      pause:
        prompt: "The system will be modified.  Continue?"
      register: install_package

    - name: setting zmodified var
      set_fact:
        install_zmodified: "{{ install_package.user_input }}"
  when:
    - prompt

- name: Download Zimbra package
  block:
    - name: Create untar directory
      file:
        path: /tmp/zcs
        state: directory

    - name: Copy zimbra file
      copy: 
        src: "{{ zim_unarchive }}.tgz"
        dest: /tmp/zcs
      register: zim_file_status
      ignore_errors: true

    - name: Downloading zimbra file in background
      get_url:
        url: "{{ zim_url }}"
        dest: /tmp/zcs
      async: 3600
      poll: 0
      register: dw_file
      when: zim_file_status.failed

- name: Generating variables
  block:
    - name: randomspam
      set_fact:
        randomham: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: randomspam
      set_fact:
        randomspam: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: randomvirus
      set_fact:
        randomvirus: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: waiting a few seconds
      wait_for:
        timeout: 1
      delegate_to: localhost

    - name: Generating password
      set_fact:
        pass_config: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=10') }}"

    - name: Current HOSTNAME
      debug:
        msg: "Current: {{ ansible_fqdn }} {{ ansible_domain }} {{ ansible_hostname }}"

    - name: Changing FQDN
      hostname: 
        name: "{{ srv_hostname }}"
      when:
        - ansible_fqdn != srv_hostname

    - name: Set Fact for ansible_fqdn
      set_fact:
        ansible_fqdn: "{{ srv_hostname }}"

    - name: Set Fact for ansible_domain
      set_fact:
        ansible_domain: "{{ srv_hostname.split('.')[1:] | join('.') }}"

    - name: Set Fact for ansible_hostname
      set_fact:
        ansible_hostname: "{{ srv_hostname.split('.')[0] }}"

    - name: Current HOSTNAME
      debug:
        msg: "NEW Current: {{ ansible_fqdn }} {{ ansible_domain }} {{ ansible_hostname }}"

- name: Manipulating files, packages and services
  block:
    - name: Setting admin password
      copy:
        content: "zimbra_pass: {{ pass_config }}"
        dest: "{{ ansible_user_dir }}/.zimbra_config_pass"
        owner: root
        group: root
        remote_src: true

    - name: Installing packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - 'perl'
        - 'net-tools'
        - 'nmap-ncat'
        - 'dnsmasq'
        - 'libselinux-python'
        - 'firewalld'
        - 'bind-utils'

    - name: System update
      yum:
        name: '*'
        state: latest

    - name: Moving dnsmasq to .original
      copy:
        remote_src: true
        src: /etc/dnsmasq.conf
        dest: /etc/dnsmasq.conf.original

    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 644

    - name: Copy ifcfg-interface template
      template:
        src: ifcfg-interface.j2
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}
        owner: root
        group: root
        mode: 0644

    - name: Copy resolv.conf template
      template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: 0644

    - name: Start and enable dnsmasq service
      service:
        name: dnsmasq
        state: restarted
        enabled: true

    - name: Start and enable firewalld service
      service:
        name: firewalld
        state: restarted
        enabled: true

    - name: Copy config script zimbra file
      template:
        src: 'installZimbraScript.j2'
        dest: /tmp/zcs/installZimbraScript

    - name: Copy config script keystrokes file
      template:
        src: 'installZimbra-keystrokes.j2'
        dest: /tmp/zcs/installZimbra-keystrokes

    - name: Download response file
      fetch:
        src: /tmp/zcs/installZimbra-keystrokes
        dest: /tmp/installZimbra-keystrokes
        flat: yes
      notify:
        - display_message

    - name: Checking download status
      async_status: jid={{ dw_file.ansible_job_id }}
      register: dw_status
      until: dw_status.finished
      retries: 980
      when: zim_file_status.failed

    - name: Disable and stop postfix
      service:
        name: postfix
        state: stopped
        enabled: False

    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 644

- name: Installing Zimbra
  block:
    - name: Configuring /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^{{ ansible_default_ipv4.address }}.*'
        line: '{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}'

    - name: unarchive zimbra file
      unarchive:
        src: /tmp/zcs/{{ zim_unarchive }}.tgz
        dest: /tmp/zcs
        remote_src: true

    - name: Installing Zimbra Collaboration just the Software
      shell: ./install.sh -s < /tmp/zcs/installZimbra-keystrokes
      args:
        chdir: /tmp/zcs/{{ zim_unarchive }}

    - name: Installing Zimbra Collaboration injecting the configuration
      shell: /opt/zimbra/libexec/zmsetup.pl -c /tmp/zcs/installZimbraScript

    - name: Change to zimbra user and execute zmcontrol restart
      shell: su - zimbra -c 'zmcontrol restart'
  when: 
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '7'

- name: Enable ports
  block:
    - name: Enable external ports for Zimbra
      firewalld:
        port: "{{ item }}"
        state: enabled
        permanent: true
      with_items:
        - "{{ zim_ports }}"
      notify:
        - Restart firewalld service
